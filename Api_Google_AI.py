import os
from dotenv import load_dotenv
import requests
import json

# Carrega as vari√°veis do arquivo .env
load_dotenv()

# Configura√ß√µes da API - CORRIGIDO
API_KEY = os.getenv("GEMINI_API_KEY") 
BASE_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"


# Verifica√ß√£o de configura√ß√£o
if not API_KEY:
    print("‚ùå ERRO: GEMINI_API_KEY n√£o encontrada no arquivo .env")
    print("üí° Dica: Verifique se o arquivo .env existe e tem a chave")
    exit()

print("‚úÖ Configura√ß√£o carregada com sucesso!")
print(f"üîë Chave API: {API_KEY[:10]}...")  # Mostra apenas os primeiros caracteres

# Headers da requisi√ß√£o
headers = {
    "Content-Type": "application/json",
}

# Corpo da requisi√ß√£o (est√° correto!)
payload = {
    "contents": [
        {
            "parts": [
                {"text": "Explique o que √© programa√ß√£o orientada a objetos em Python."}
            ]
        }
    ]
}

try:
    # URL CORRETA - chave como par√¢metro
    full_url = f"{BASE_URL}?key={API_KEY}"
    response = requests.post(full_url, headers=headers, json=payload)
    response.raise_for_status()
    
    # Processar a resposta
    data = response.json()
    resposta = data["candidates"][0]["content"]["parts"][0]["text"]
    print("Resposta do Gemini:")
    print(resposta)
    
except requests.exceptions.RequestException as e:
    print(f"Erro na requisi√ß√£o: {e}")
    if hasattr(e, 'response') and e.response:
        print(f"Detalhes do erro: {e.response.text}")